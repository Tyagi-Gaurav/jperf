buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.0.0'
        classpath 'pl.allegro.tech.build:axion-release-plugin:1.12.0'
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://repo1.maven.org/maven2/"
    }
    jcenter()
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'pl.allegro.tech.build.axion-release'

group 'com.aan.gt'

project.version = scmVersion.version
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

scmVersion {
    tag {
        prefix = 'perfAgent'
    }
}

shadowJar {
    mergeServiceFiles()
}

dependencies {
    implementation "org.javassist:javassist:3.27.0-GA"
    implementation "net.bytebuddy:byte-buddy:1.10.14"
    implementation "net.bytebuddy:byte-buddy-agent:1.10.14"

    compileOnly "org.projectlombok:lombok:1.18.12"
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
}

jar {
    from {
        configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes "Can-Redefine-Classes" : true
        attributes "Can-Retransform-Classes" : true
        attributes "Premain-Class" : "com.gt.perf.bb.agent.AgentLoader"
        attributes "Main-Class" : "com.gt.main.ClassUnderTest"
    }
}

plugins {
    id("maven-publish")
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Tyagi-Gaurav/jperf")
            credentials {
                username = loadProperty("gpr.user") ?: System.getenv("USERNAME")
                password = loadProperty("github.token") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            groupId = 'com.gt'
            artifactId = 'jperf'
            version = scmVersion.version

            from(components.java)
        }
    }
}

release.dependsOn("loadGitHubToken")

task loadGitHubToken << {
    scmVersion.repository.customUsername = loadProperty("github.token")
}

task loadProperty(propertyName : String) {
    Properties properties = new Properties()
    File propertiesFile = new File(System.getProperty("user.home")  + '/keys/all_keys')
    propertiesFile.withInputStream {
        properties.load(it)
    }

    byte[] decoded = properties."$propertyName".decodeBase64()
    return new String(decoded)
}