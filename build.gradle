buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:6.0.0'
        classpath 'pl.allegro.tech.build:axion-release-plugin:1.12.0'
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://repo1.maven.org/maven2/"
    }
    jcenter()
}

apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'pl.allegro.tech.build.axion-release'

group 'com.aan.gt'

project.version = scmVersion.version
sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

scmVersion {
    tag {
        prefix = 'perfAgent'
    }
}

shadowJar {
    mergeServiceFiles()
}

dependencies {
    implementation "org.javassist:javassist:3.27.0-GA"
    implementation "net.bytebuddy:byte-buddy:1.10.14"
    implementation "net.bytebuddy:byte-buddy-agent:1.10.14"

    compileOnly "org.projectlombok:lombok:1.18.12"
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
}

jar {
    from {
        configurations.implementation.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    manifest {
        attributes "Can-Redefine-Classes": true
        attributes "Can-Retransform-Classes": true
        attributes "Premain-Class": "com.gt.perf.bb.agent.AgentLoader"
        attributes "Main-Class": "com.gt.main.ClassUnderTest"
    }
}

static def fetchVersion() {
    def command = "git describe --tags `git rev-list --tags --max-count=1` | tr \"-\" \" \" | awk '{print \$2}'"
    return ["bash", "-c", command].execute().text.trim()
}

publishing {
    publications {
        shadow(MavenPublication) { publication ->
            version = fetchVersion()
            project.shadow.component(publication)

        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Tyagi-Gaurav/jperf")
            credentials {
                username = loadProperty("github.user") ?: System.getenv("USERNAME")
                password = loadProperty("github.token") ?: System.getenv("TOKEN")
            }
        }
    }
}

release.dependsOn("loadGitHubToken")

task loadGitHubToken {
    scmVersion.repository.customUsername = loadProperty("github.token")
}

String loadProperty(String propertyName) {
    Properties properties = new Properties()
    File propertiesFile = new File(System.getProperty("user.home") + '/keys/all_keys')
    propertiesFile.withInputStream {
        properties.load(it)
    }

    byte[] decoded = properties."$propertyName".decodeBase64()
    return new String(decoded)
}

def getVersionName = { ->
    def hashStdOut = new ByteArrayOutputStream()
    exec {
        commandLine "git", "rev-parse", "--short", "HEAD"
        standardOutput = hashStdOut
    }

    def buildNumberStdOut = new ByteArrayOutputStream()
    exec {
        commandLine 'echo', "$BUILD_NUMBER"
        standardOutput = buildNumberStdOut
    }
    return buildNumberStdOut.toString().trim() + '-' + hashStdOut.toString().trim()
}
